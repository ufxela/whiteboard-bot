{"version":3,"sources":["actions.js","App.js","serviceWorker.js","index.js"],"names":["onError","e","console","error","getPointsString","saveData","JSON","parse","log","pointsString","prev_x","prev_y","lines","line","first","points","point","curr_x","Math","round","x","curr_y","y","not_complete_coord","match","length","breakDownPointsString","len","pointsStrings","curr_start","curr_end","MAX_REQ_BODY","charAt","substring","push","sendPoints","currentStringIndex","totalStrings","a","dataString","success","response","fetch","method","body","then","res","reboot","text","App","canvasRef","getSaveData","i","clear","alert","hideInterface","hideGrid","lazyRadius","brushRadius","canvasWidth","canvasHeight","ref","canvasDraw","onClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.111cb19c.chunk.js","sourcesContent":["export const API_URL = \"\";\nexport const MAX_REQ_BODY = 750; // can probably be larger\nexport const MAX_PTS_STR_LEN = MAX_REQ_BODY - 10; // allot space for metadata\n\nfunction onError(e) {\n    console.error(e);\n}\n\n/**\n * Current ways to increase data efficiency:\n * - stores relative offsets, instead of absolute data. Note: first data point is always absolute.\n *   (saves between 3x and 100x amount of data, depending on a variety of factors)\n * \n * Other ways to increase data efficiency: \n * - sample every Nth point (~N times more efficient), or coalesce series of small offsets into single larger offset\n * - store as actual int data, not strings (~25.6 times more efficient)\n * \n */ \nexport function getPointsString(saveData){\n    saveData = JSON.parse(saveData);\n    console.log(saveData, typeof(saveData));\n    let pointsString = \"\";\n\n    let prev_x = 0, prev_y = 0;\n    for(const line of saveData.lines){\n        let first = 1;\n        for(const point of line.points){\n            let curr_x = Math.round(point.x);\n            let curr_y = Math.round(point.y);\n            if(curr_x - prev_x !== 0 && curr_y - prev_y !== 0){\n                // only send data if non zero.\n                pointsString += `${curr_x - prev_x},${curr_y - prev_y},`\n                prev_x = curr_x;\n                prev_y = curr_y;\n                if(first === 1){\n                    pointsString += 'p,'; // p for place\n                    first = 0;\n                }\n            }\n        }\n        pointsString += 'l,'; // l for lift\n    }\n    return pointsString;\n}\n\nfunction not_complete_coord(pointsString){\n    const commas_count = (pointsString.match(/,/g) || []).length;\n    const lift_place_count = (pointsString.match(/l/g) || []).length + (pointsString.match(/p/g) || []).length;\n    if((commas_count - lift_place_count) % 2 === 1){\n        // odd # of commas => even number of coordinate elements, and we want an even # b/c two coordinate elements per coordinate \n        return true;\n    }else{\n        return false;\n    }\n}\n\nexport function breakDownPointsString(pointsString){\n    const len = pointsString.length;\n    let pointsStrings = [];\n    let curr_start = 0;\n    let curr_end = MAX_PTS_STR_LEN;\n\n    while(curr_start < len){\n        if(curr_end > len){\n            curr_end = len;\n        }else{\n            while(pointsString.charAt(curr_end - 1) !== \",\" || not_complete_coord(pointsString.substring(curr_start, curr_end))){\n                curr_end--;\n                if(curr_end <= curr_start){\n                    console.log(\"ERROR\");\n                    return null;\n                }\n            }\n        }\n\n        pointsStrings.push(pointsString.substring(curr_start, curr_end));\n        curr_start = curr_end;\n        curr_end += MAX_PTS_STR_LEN;\n    }\n    \n    return pointsStrings;\n}\n\n/**\n * \n * @param {*} pointsString \n * @param {*} currentStringIndex \n * @param {*} totalStrings \n * \n * data string format: currentStringIndex,totalStrings,[l|p|INT]*\n */\nexport async function sendPoints(pointsString, currentStringIndex, totalStrings) {\n    const dataString = `${currentStringIndex},${totalStrings},${pointsString}`;\n    \n    if(dataString.length > MAX_REQ_BODY){\n        return {success: false, response: \"request too large\"}\n    }\n    try {\n        console.log(\"Sending data string:\", dataString);\n        await fetch(`${API_URL}/points`, {\n            method: 'POST',\n            body: dataString\n        }).then();\n        // console.log(response);\n        const res = {\n            success: true,\n        }\n        return res;\n    } catch (e) {\n        onError(e);\n    }\n}\n\nexport async function reboot(){\n    try {\n        const response = await fetch(`${API_URL}/poll`, {\n            method: 'GET',\n        }).then(e => e.text());\n        const res = {\n            success: true,\n            response: response,\n        }\n        return res;\n    } catch (e) {\n        onError(e);\n    }\n}","import './App.css';\n\nimport { breakDownPointsString, getPointsString, reboot, sendPoints } from './actions';\n\nimport CanvasDraw from \"react-canvas-draw\";\nimport React from 'react';\n\nconst App = () => {\n  let canvasRef;\n  \n  async function onCanvasSubmit(){\n    if(canvasRef){\n      let success = false;\n      const pointsStrings = breakDownPointsString(getPointsString(canvasRef.getSaveData()));\n      for(let i = 0; i < 1 /*pointsStrings.length*/; i++){\n        await sendPoints(pointsStrings[i], i, pointsStrings.length);\n        success &= true; // lol\n      }\n      if(success){\n        canvasRef.clear();\n      }else{\n        alert(\"there was an error in sending your points\");\n      }\n    }\n  }\n\n  function onCanvasClear(){\n    if(canvasRef){\n      canvasRef.clear();\n    }\n  }\n\n  async function onReboot(){\n    await reboot();\n    alert(\"pi rebooting\");\n  }\n  \n  return ( \n    <div>\n      <CanvasDraw \n        hideInterface\n        hideGrid\n        lazyRadius={0}\n        brushRadius={1}\n        canvasWidth={1000}\n        canvasHeight={700}\n        ref={canvasDraw => (canvasRef = canvasDraw)}\n      /> \n      <button onClick={onCanvasSubmit}>\n        send\n      </button>\n      <button onClick={onCanvasClear}>\n        clear\n      </button>\n      <button onClick={onReboot}>\n        reboot\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}